// Code generated by protoc-gen-go. DO NOT EDIT.
// source: group1/group1echo.proto

package group1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EchoGroup1Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoGroup1Request) Reset()         { *m = EchoGroup1Request{} }
func (m *EchoGroup1Request) String() string { return proto.CompactTextString(m) }
func (*EchoGroup1Request) ProtoMessage()    {}
func (*EchoGroup1Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3dd02632756e5d, []int{0}
}

func (m *EchoGroup1Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoGroup1Request.Unmarshal(m, b)
}
func (m *EchoGroup1Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoGroup1Request.Marshal(b, m, deterministic)
}
func (m *EchoGroup1Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoGroup1Request.Merge(m, src)
}
func (m *EchoGroup1Request) XXX_Size() int {
	return xxx_messageInfo_EchoGroup1Request.Size(m)
}
func (m *EchoGroup1Request) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoGroup1Request.DiscardUnknown(m)
}

var xxx_messageInfo_EchoGroup1Request proto.InternalMessageInfo

func (m *EchoGroup1Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EchoGroup1Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Time                 string   `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoGroup1Reply) Reset()         { *m = EchoGroup1Reply{} }
func (m *EchoGroup1Reply) String() string { return proto.CompactTextString(m) }
func (*EchoGroup1Reply) ProtoMessage()    {}
func (*EchoGroup1Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3dd02632756e5d, []int{1}
}

func (m *EchoGroup1Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoGroup1Reply.Unmarshal(m, b)
}
func (m *EchoGroup1Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoGroup1Reply.Marshal(b, m, deterministic)
}
func (m *EchoGroup1Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoGroup1Reply.Merge(m, src)
}
func (m *EchoGroup1Reply) XXX_Size() int {
	return xxx_messageInfo_EchoGroup1Reply.Size(m)
}
func (m *EchoGroup1Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoGroup1Reply.DiscardUnknown(m)
}

var xxx_messageInfo_EchoGroup1Reply proto.InternalMessageInfo

func (m *EchoGroup1Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EchoGroup1Reply) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoGroup1Request)(nil), "group1.EchoGroup1Request")
	proto.RegisterType((*EchoGroup1Reply)(nil), "group1.EchoGroup1Reply")
}

func init() { proto.RegisterFile("group1/group1echo.proto", fileDescriptor_ca3dd02632756e5d) }

var fileDescriptor_ca3dd02632756e5d = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x2f, 0xca, 0x2f,
	0x2d, 0x30, 0xd4, 0x87, 0x50, 0xa9, 0xc9, 0x19, 0xf9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0x6c, 0x10, 0x11, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0xfd, 0xc4, 0x82, 0x4c, 0xfd,
	0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x88, 0x2a, 0x25, 0x75, 0x2e,
	0x41, 0xd7, 0xe4, 0x8c, 0x7c, 0x77, 0xb0, 0xda, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21,
	0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b,
	0xc9, 0x9e, 0x8b, 0x1f, 0x59, 0x61, 0x41, 0x4e, 0xa5, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71,
	0x71, 0x62, 0x3a, 0x4c, 0x25, 0x8c, 0x0b, 0x32, 0xa0, 0x24, 0x33, 0x37, 0x55, 0x82, 0x09, 0x62,
	0x00, 0x88, 0x6d, 0x54, 0xc9, 0x25, 0xe8, 0x9e, 0x58, 0x92, 0x5a, 0x9e, 0x58, 0x89, 0x30, 0x47,
	0x28, 0x85, 0x8b, 0x0b, 0x89, 0x27, 0xa9, 0x07, 0x71, 0xb3, 0x1e, 0x86, 0x93, 0xa4, 0xc4, 0xb1,
	0x49, 0x15, 0xe4, 0x54, 0x2a, 0x29, 0x35, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x46, 0x49, 0x5c, 0xbf,
	0xcc, 0x50, 0x3f, 0xb5, 0x22, 0x31, 0xb7, 0x20, 0x27, 0x15, 0x1a, 0x18, 0xfa, 0xa0, 0xd0, 0xb0,
	0x62, 0xd4, 0x4a, 0x62, 0x03, 0xfb, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x83, 0x7c,
	0x59, 0x2c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GatewayEchoGroup1Client is the client API for GatewayEchoGroup1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayEchoGroup1Client interface {
	EchoGroup1(ctx context.Context, in *EchoGroup1Request, opts ...grpc.CallOption) (*EchoGroup1Reply, error)
}

type gatewayEchoGroup1Client struct {
	cc grpc.ClientConnInterface
}

func NewGatewayEchoGroup1Client(cc grpc.ClientConnInterface) GatewayEchoGroup1Client {
	return &gatewayEchoGroup1Client{cc}
}

func (c *gatewayEchoGroup1Client) EchoGroup1(ctx context.Context, in *EchoGroup1Request, opts ...grpc.CallOption) (*EchoGroup1Reply, error) {
	out := new(EchoGroup1Reply)
	err := c.cc.Invoke(ctx, "/group1.GatewayEchoGroup1/EchoGroup1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayEchoGroup1Server is the server API for GatewayEchoGroup1 service.
type GatewayEchoGroup1Server interface {
	EchoGroup1(context.Context, *EchoGroup1Request) (*EchoGroup1Reply, error)
}

// UnimplementedGatewayEchoGroup1Server can be embedded to have forward compatible implementations.
type UnimplementedGatewayEchoGroup1Server struct {
}

func (*UnimplementedGatewayEchoGroup1Server) EchoGroup1(ctx context.Context, req *EchoGroup1Request) (*EchoGroup1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoGroup1 not implemented")
}

func RegisterGatewayEchoGroup1Server(s *grpc.Server, srv GatewayEchoGroup1Server) {
	s.RegisterService(&_GatewayEchoGroup1_serviceDesc, srv)
}

func _GatewayEchoGroup1_EchoGroup1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoGroup1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayEchoGroup1Server).EchoGroup1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group1.GatewayEchoGroup1/EchoGroup1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayEchoGroup1Server).EchoGroup1(ctx, req.(*EchoGroup1Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayEchoGroup1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "group1.GatewayEchoGroup1",
	HandlerType: (*GatewayEchoGroup1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoGroup1",
			Handler:    _GatewayEchoGroup1_EchoGroup1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group1/group1echo.proto",
}
